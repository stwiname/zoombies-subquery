type Transaction @entity {

  id: ID! # Transaction hash

  network: Int

  blockTimestamp: Date

  value: BigInt

  to: String

  from: String

  contractAddress: String

}

type Sum @entity {

  id: ID! # only "1" ring to hold them all

  network: Int

  mintedTotal: BigInt

  burnedTotal: BigInt

}

type ZoomInflation @entity {

  id: ID! # only "1" ring to hold them all

  network: Int

  total: BigInt

}

type NFTHolders @entity {

  id: ID! # holder wallet address

}

type SponsorAffiliateCount @entity{
  
    id: ID! # sponsor wallet address

    network: Int
  
    affiliateCount: BigInt
  
}

type SponsorRewardTotal @entity{
  
    id: ID! # sponsor wallet address

    network: Int
  
    rewardTotal: BigInt
  
}

type ZoomPerDay @entity {

  id: ID! #timestamp

  network: Int

  minted: BigInt

  burned: BigInt

}

type ZoomScoreUpdated @entity {

  id: ID! #timestamp

  network: Int

  blockTimestamp: Date

  owner: String

  newZoomScore: BigInt

  zoomGained: BigInt

}

type ZoomBurned @entity {

  id: ID! #timestamp

  network: Int

  blockTimestamp: Date

  owner: String

  totalZoomBurned: BigInt

  zoomBurned: BigInt

}

type NFTPerDay @entity {

  id: ID! #timestamp

  network: Int

  minted: BigInt

  burned: BigInt

}

type RarityPerDay @entity {

  id: ID! #timestamp

  network: Int

  diamond: BigInt

  platinum: BigInt

  epic: BigInt

  rare: BigInt

  uncommon: BigInt

  common: BigInt

}

type LogCardMinted @entity {
	id: ID! # Transaction Hash

  network: Int

  blockTimestamp: Date

  buyer: String

  tokenId: BigInt

  rarity: Int

  cardTypeId: Int

  editionNumber: BigInt

  isFoil: Boolean
}

type MintedType @entity {
  id: ID!

  network: Int

  blockTimestamp: Date

  cardTypeId: Int

}

type LogCardTypeLoaded @entity {
 id: ID!

 network: Int

 blockTimestamp: Date

 cardTypeId: Int

 cardTypeName: String

 editionTotal: BigInt
}

type LogPackOpened @entity {
 id: ID!

 network: Int

 blockTimestamp: Date

 buyer: String

 rarity: Int
}

type LogSponsorLinked @entity {
  id:ID!

  network: Int

  blockTimestamp: Date

  sponsor: String

  affiliate: String
}

type LogSponsorReward @entity {
  id:ID!

  network: Int

  blockTimestamp: Date

  sponsor: String

  affiliate: String

  zoomReward: BigInt
}

type LogDailyReward @entity {
  id:ID!

  network: Int

  blockTimestamp: Date

  player: String

  newBoosterBalance: BigInt
}

type LogRewardBooster @entity {
  id: ID!

  network: Int

  blockTimestamp: Date

  winner: String

  boostersAwarded: BigInt
}

type LogSacrificeNFT @entity {
  id:ID!

  network: Int

  blockTimestamp: Date

  owner: String

  tokenId: BigInt

  cardTypeId: BigInt

  zoomGained: BigInt
}

type NftTransfer @entity {
 id:ID!

 network: Int

 blockTimestamp: Date

 from: String

 to: String!

 tokenId: BigInt
}

type BridgedZoom @entity {
 id:ID!

 network: Int
 
 blockNumber: Int

 blockTimestamp: Date

 tx: String

 nakamaUserId: String

 amount: BigInt
}