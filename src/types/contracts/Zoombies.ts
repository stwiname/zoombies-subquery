/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ZoombiesInterface extends utils.Interface {
  functions: {
    "allBoosterCardIds(uint8,uint256)": FunctionFragment;
    "allCardTypes(uint16)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizedContracts(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseProbability(uint256)": FunctionFragment;
    "boosterCreditsOwned(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnAndBoost(uint256)": FunctionFragment;
    "cardTypeToEdition(uint16)": FunctionFragment;
    "cardTypesOwned(address,uint16)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getNFTData(uint256)": FunctionFragment;
    "getProbs(uint256)": FunctionFragment;
    "getTokensByRarity()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "loadNewCardType(uint16,string,string,uint8,uint8,uint8,uint16,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "name()": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setStoreRelease(uint16,uint256)": FunctionFragment;
    "sponsors(address)": FunctionFragment;
    "storeReleaseTime(uint16)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensByRarity(uint256)": FunctionFragment;
    "totalBoostersRewarded()": FunctionFragment;
    "totalCardTypes()": FunctionFragment;
    "totalSacrificed(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "weiCostOfBooster()": FunctionFragment;
    "zoomTokenContract()": FunctionFragment;
    "zoomValuePerBoosterCredit()": FunctionFragment;
    "buyCard(uint16)": FunctionFragment;
    "getFreeCard(uint16)": FunctionFragment;
    "sacrificeNFTs(uint256[])": FunctionFragment;
    "getBonusBoosters()": FunctionFragment;
    "linkMySponsor(address)": FunctionFragment;
    "buyBoosterCredits(uint256)": FunctionFragment;
    "buyBoosterAndMintNFT()": FunctionFragment;
    "mintBoosterNFT(uint256)": FunctionFragment;
    "awardBoosterCredits(address,uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "getTimeToDailyBonus(address)": FunctionFragment;
    "mintDiamond(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "setAuthorizedContract(address,bool)": FunctionFragment;
    "updateCostOfBooster(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allBoosterCardIds"
      | "allCardTypes"
      | "approve"
      | "authorizedContracts"
      | "balanceOf"
      | "baseProbability"
      | "boosterCreditsOwned"
      | "burn"
      | "burnAndBoost"
      | "cardTypeToEdition"
      | "cardTypesOwned"
      | "getApproved"
      | "getNFTData"
      | "getProbs"
      | "getTokensByRarity"
      | "isApprovedForAll"
      | "loadNewCardType"
      | "name"
      | "nfts"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setStoreRelease"
      | "sponsors"
      | "storeReleaseTime"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "tokensByRarity"
      | "totalBoostersRewarded"
      | "totalCardTypes"
      | "totalSacrificed"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "weiCostOfBooster"
      | "zoomTokenContract"
      | "zoomValuePerBoosterCredit"
      | "buyCard"
      | "getFreeCard"
      | "sacrificeNFTs"
      | "getBonusBoosters"
      | "linkMySponsor"
      | "buyBoosterCredits"
      | "buyBoosterAndMintNFT"
      | "mintBoosterNFT"
      | "awardBoosterCredits"
      | "supportsInterface"
      | "getTimeToDailyBonus"
      | "mintDiamond"
      | "withdraw"
      | "setAuthorizedContract"
      | "updateCostOfBooster"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allBoosterCardIds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allCardTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseProbability",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boosterCreditsOwned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndBoost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cardTypeToEdition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cardTypesOwned",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProbs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensByRarity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loadNewCardType",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nfts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStoreRelease",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeReleaseTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensByRarity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBoostersRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCardTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSacrificed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weiCostOfBooster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zoomTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zoomValuePerBoosterCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyCard",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCard",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sacrificeNFTs",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusBoosters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkMySponsor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBoosterCredits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBoosterAndMintNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBoosterNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "awardBoosterCredits",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeToDailyBonus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDiamond",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedContract",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCostOfBooster",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allBoosterCardIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCardTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseProbability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boosterCreditsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAndBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cardTypeToEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cardTypesOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProbs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensByRarity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadNewCardType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStoreRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sponsors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensByRarity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBoostersRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCardTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSacrificed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weiCostOfBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zoomTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zoomValuePerBoosterCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sacrificeNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusBoosters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkMySponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBoosterCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBoosterAndMintNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBoosterNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardBoosterCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeToDailyBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCostOfBooster",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "LogCardMinted(address,uint256,uint8,uint32,uint256,bool)": EventFragment;
    "LogCardTypeLoaded(uint32,string,uint256)": EventFragment;
    "LogContractAuthorized(address,bool)": EventFragment;
    "LogCostOfBoosterUpdated(uint256)": EventFragment;
    "LogDailyReward(address,uint256)": EventFragment;
    "LogPackOpened(address,uint8)": EventFragment;
    "LogRewardBoosters(address,uint256)": EventFragment;
    "LogSacrificeNFT(address,uint256,uint16,uint256,uint256)": EventFragment;
    "LogSponsorLinked(address,address)": EventFragment;
    "LogSponsorReward(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Probs(uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCardMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCardTypeLoaded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogContractAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCostOfBoosterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDailyReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPackOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRewardBoosters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSacrificeNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSponsorLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSponsorReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Probs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface LogCardMintedEventObject {
  buyer: string;
  tokenId: BigNumber;
  rarity: number;
  cardTypeId: number;
  editionNumber: BigNumber;
  isFoil: boolean;
}
export type LogCardMintedEvent = TypedEvent<
  [string, BigNumber, number, number, BigNumber, boolean],
  LogCardMintedEventObject
>;

export type LogCardMintedEventFilter = TypedEventFilter<LogCardMintedEvent>;

export interface LogCardTypeLoadedEventObject {
  cardTypeId: number;
  cardTypeName: string;
  editionTotal: BigNumber;
}
export type LogCardTypeLoadedEvent = TypedEvent<
  [number, string, BigNumber],
  LogCardTypeLoadedEventObject
>;

export type LogCardTypeLoadedEventFilter =
  TypedEventFilter<LogCardTypeLoadedEvent>;

export interface LogContractAuthorizedEventObject {
  newZoombiesService: string;
  isApproved: boolean;
}
export type LogContractAuthorizedEvent = TypedEvent<
  [string, boolean],
  LogContractAuthorizedEventObject
>;

export type LogContractAuthorizedEventFilter =
  TypedEventFilter<LogContractAuthorizedEvent>;

export interface LogCostOfBoosterUpdatedEventObject {
  newCost: BigNumber;
}
export type LogCostOfBoosterUpdatedEvent = TypedEvent<
  [BigNumber],
  LogCostOfBoosterUpdatedEventObject
>;

export type LogCostOfBoosterUpdatedEventFilter =
  TypedEventFilter<LogCostOfBoosterUpdatedEvent>;

export interface LogDailyRewardEventObject {
  player: string;
  newBoosterBalance: BigNumber;
}
export type LogDailyRewardEvent = TypedEvent<
  [string, BigNumber],
  LogDailyRewardEventObject
>;

export type LogDailyRewardEventFilter = TypedEventFilter<LogDailyRewardEvent>;

export interface LogPackOpenedEventObject {
  buyer: string;
  rarity: number;
}
export type LogPackOpenedEvent = TypedEvent<
  [string, number],
  LogPackOpenedEventObject
>;

export type LogPackOpenedEventFilter = TypedEventFilter<LogPackOpenedEvent>;

export interface LogRewardBoostersEventObject {
  winner: string;
  boostersAwarded: BigNumber;
}
export type LogRewardBoostersEvent = TypedEvent<
  [string, BigNumber],
  LogRewardBoostersEventObject
>;

export type LogRewardBoostersEventFilter =
  TypedEventFilter<LogRewardBoostersEvent>;

export interface LogSacrificeNFTEventObject {
  owner: string;
  tokenId: BigNumber;
  cardTypeId: number;
  zoomGained: BigNumber;
  totalSacrificed: BigNumber;
}
export type LogSacrificeNFTEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber],
  LogSacrificeNFTEventObject
>;

export type LogSacrificeNFTEventFilter = TypedEventFilter<LogSacrificeNFTEvent>;

export interface LogSponsorLinkedEventObject {
  sponsor: string;
  affiliate: string;
}
export type LogSponsorLinkedEvent = TypedEvent<
  [string, string],
  LogSponsorLinkedEventObject
>;

export type LogSponsorLinkedEventFilter =
  TypedEventFilter<LogSponsorLinkedEvent>;

export interface LogSponsorRewardEventObject {
  sponsor: string;
  affiliate: string;
  zoomReward: BigNumber;
}
export type LogSponsorRewardEvent = TypedEvent<
  [string, string, BigNumber],
  LogSponsorRewardEventObject
>;

export type LogSponsorRewardEventFilter =
  TypedEventFilter<LogSponsorRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProbsEventObject {
  epic: BigNumber;
  rare: BigNumber;
  uncommon: BigNumber;
  common: BigNumber;
}
export type ProbsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ProbsEventObject
>;

export type ProbsEventFilter = TypedEventFilter<ProbsEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Zoombies extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZoombiesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allBoosterCardIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    allCardTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        cardTypeId: number;
        name: string;
        set: string;
        assetType: number;
        notStoreOrBonus: number;
        rarity: number;
        totalAvailable: number;
        weiCost: BigNumber;
        buyZoom: BigNumber;
        sacrificeZoom: BigNumber;
        unlockZoom: BigNumber;
        cardLevel: number;
      }
    >;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseProbability(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boosterCreditsOwned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnAndBoost(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cardTypeToEdition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cardTypesOwned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, boolean]>;

    getProbs(
      wager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokensByRarity(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loadNewCardType(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _cardTypeName: PromiseOrValue<string>,
      _set: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _notStoreOrBonus: PromiseOrValue<BigNumberish>,
      _rarity: PromiseOrValue<BigNumberish>,
      _totalAvailable: PromiseOrValue<BigNumberish>,
      _weiCost: PromiseOrValue<BigNumberish>,
      _buyZoom: PromiseOrValue<BigNumberish>,
      _sacrificeZoom: PromiseOrValue<BigNumberish>,
      _unlockZoom: PromiseOrValue<BigNumberish>,
      _cardLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        cardTypeId: number;
        editionNumber: BigNumber;
        isFoil: boolean;
      }
    >;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStoreRelease(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _hoursFromNow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sponsors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    storeReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721Enumerable-tokenByIndex}.
     */
    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensByRarity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalBoostersRewarded(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCardTypes(overrides?: CallOverrides): Promise<[number]>;

    totalSacrificed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weiCostOfBooster(overrides?: CallOverrides): Promise<[BigNumber]>;

    zoomTokenContract(overrides?: CallOverrides): Promise<[string]>;

    zoomValuePerBoosterCredit(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFreeCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sacrificeNFTs(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBonusBoosters(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    linkMySponsor(
      _mySponsor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyBoosterCredits(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyBoosterAndMintNFT(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintBoosterNFT(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    awardBoosterCredits(
      _winner: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTimeToDailyBonus(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timeStamp: BigNumber }>;

    mintDiamond(
      _receiverWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraw balance to wallet
     */
    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthorizedContract(
      _newZoombiesService: PromiseOrValue<string>,
      _isAuthorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCostOfBooster(
      _newWeiCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allBoosterCardIds(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  allCardTypes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      cardTypeId: number;
      name: string;
      set: string;
      assetType: number;
      notStoreOrBonus: number;
      rarity: number;
      totalAvailable: number;
      weiCost: BigNumber;
      buyZoom: BigNumber;
      sacrificeZoom: BigNumber;
      unlockZoom: BigNumber;
      cardLevel: number;
    }
  >;

  /**
   * See {IERC721-approve}.
   */
  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC721-balanceOf}.
   */
  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseProbability(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  boosterCreditsOwned(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
   */
  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnAndBoost(
    zoomWager: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cardTypeToEdition(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cardTypesOwned(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC721-getApproved}.
   */
  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNFTData(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, boolean]>;

  getProbs(
    wager: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokensByRarity(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loadNewCardType(
    _cardTypeId: PromiseOrValue<BigNumberish>,
    _cardTypeName: PromiseOrValue<string>,
    _set: PromiseOrValue<string>,
    _assetType: PromiseOrValue<BigNumberish>,
    _notStoreOrBonus: PromiseOrValue<BigNumberish>,
    _rarity: PromiseOrValue<BigNumberish>,
    _totalAvailable: PromiseOrValue<BigNumberish>,
    _weiCost: PromiseOrValue<BigNumberish>,
    _buyZoom: PromiseOrValue<BigNumberish>,
    _sacrificeZoom: PromiseOrValue<BigNumberish>,
    _unlockZoom: PromiseOrValue<BigNumberish>,
    _cardLevel: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721Metadata-name}.
   */
  name(overrides?: CallOverrides): Promise<string>;

  nfts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      cardTypeId: number;
      editionNumber: BigNumber;
      isFoil: boolean;
    }
  >;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-ownerOf}.
   */
  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-setApprovalForAll}.
   */
  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStoreRelease(
    _cardTypeId: PromiseOrValue<BigNumberish>,
    _hoursFromNow: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sponsors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  storeReleaseTime(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC721Metadata-symbol}.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721Enumerable-tokenByIndex}.
   */
  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC721Enumerable-tokenOfOwnerByIndex}.
   */
  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC721Metadata-tokenURI}.
   */
  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensByRarity(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalBoostersRewarded(overrides?: CallOverrides): Promise<BigNumber>;

  totalCardTypes(overrides?: CallOverrides): Promise<number>;

  totalSacrificed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC721Enumerable-totalSupply}.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC721-transferFrom}.
   */
  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weiCostOfBooster(overrides?: CallOverrides): Promise<BigNumber>;

  zoomTokenContract(overrides?: CallOverrides): Promise<string>;

  zoomValuePerBoosterCredit(overrides?: CallOverrides): Promise<BigNumber>;

  buyCard(
    _cardTypeId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFreeCard(
    _cardTypeId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sacrificeNFTs(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBonusBoosters(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  linkMySponsor(
    _mySponsor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyBoosterCredits(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyBoosterAndMintNFT(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintBoosterNFT(
    zoomWager: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  awardBoosterCredits(
    _winner: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTimeToDailyBonus(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintDiamond(
    _receiverWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraw balance to wallet
   */
  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthorizedContract(
    _newZoombiesService: PromiseOrValue<string>,
    _isAuthorized: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCostOfBooster(
    _newWeiCost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allBoosterCardIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    allCardTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        cardTypeId: number;
        name: string;
        set: string;
        assetType: number;
        notStoreOrBonus: number;
        rarity: number;
        totalAvailable: number;
        weiCost: BigNumber;
        buyZoom: BigNumber;
        sacrificeZoom: BigNumber;
        unlockZoom: BigNumber;
        cardLevel: number;
      }
    >;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseProbability(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boosterCreditsOwned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnAndBoost(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    cardTypeToEdition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cardTypesOwned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, boolean]>;

    getProbs(
      wager: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        c: BigNumber;
        u: BigNumber;
        r: BigNumber;
        e: BigNumber;
      }
    >;

    getTokensByRarity(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loadNewCardType(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _cardTypeName: PromiseOrValue<string>,
      _set: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _notStoreOrBonus: PromiseOrValue<BigNumberish>,
      _rarity: PromiseOrValue<BigNumberish>,
      _totalAvailable: PromiseOrValue<BigNumberish>,
      _weiCost: PromiseOrValue<BigNumberish>,
      _buyZoom: PromiseOrValue<BigNumberish>,
      _sacrificeZoom: PromiseOrValue<BigNumberish>,
      _unlockZoom: PromiseOrValue<BigNumberish>,
      _cardLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<string>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        cardTypeId: number;
        editionNumber: BigNumber;
        isFoil: boolean;
      }
    >;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStoreRelease(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _hoursFromNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    storeReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721Enumerable-tokenByIndex}.
     */
    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensByRarity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBoostersRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    totalCardTypes(overrides?: CallOverrides): Promise<number>;

    totalSacrificed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    weiCostOfBooster(overrides?: CallOverrides): Promise<BigNumber>;

    zoomTokenContract(overrides?: CallOverrides): Promise<string>;

    zoomValuePerBoosterCredit(overrides?: CallOverrides): Promise<BigNumber>;

    buyCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFreeCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sacrificeNFTs(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBonusBoosters(overrides?: CallOverrides): Promise<void>;

    linkMySponsor(
      _mySponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyBoosterCredits(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyBoosterAndMintNFT(overrides?: CallOverrides): Promise<boolean>;

    mintBoosterNFT(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    awardBoosterCredits(
      _winner: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTimeToDailyBonus(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintDiamond(
      _receiverWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraw balance to wallet
     */
    withdraw(overrides?: CallOverrides): Promise<boolean>;

    setAuthorizedContract(
      _newZoombiesService: PromiseOrValue<string>,
      _isAuthorized: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCostOfBooster(
      _newWeiCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "LogCardMinted(address,uint256,uint8,uint32,uint256,bool)"(
      buyer?: PromiseOrValue<string> | null,
      tokenId?: null,
      rarity?: null,
      cardTypeId?: PromiseOrValue<BigNumberish> | null,
      editionNumber?: null,
      isFoil?: null
    ): LogCardMintedEventFilter;
    LogCardMinted(
      buyer?: PromiseOrValue<string> | null,
      tokenId?: null,
      rarity?: null,
      cardTypeId?: PromiseOrValue<BigNumberish> | null,
      editionNumber?: null,
      isFoil?: null
    ): LogCardMintedEventFilter;

    "LogCardTypeLoaded(uint32,string,uint256)"(
      cardTypeId?: PromiseOrValue<BigNumberish> | null,
      cardTypeName?: null,
      editionTotal?: null
    ): LogCardTypeLoadedEventFilter;
    LogCardTypeLoaded(
      cardTypeId?: PromiseOrValue<BigNumberish> | null,
      cardTypeName?: null,
      editionTotal?: null
    ): LogCardTypeLoadedEventFilter;

    "LogContractAuthorized(address,bool)"(
      newZoombiesService?: null,
      isApproved?: null
    ): LogContractAuthorizedEventFilter;
    LogContractAuthorized(
      newZoombiesService?: null,
      isApproved?: null
    ): LogContractAuthorizedEventFilter;

    "LogCostOfBoosterUpdated(uint256)"(
      newCost?: null
    ): LogCostOfBoosterUpdatedEventFilter;
    LogCostOfBoosterUpdated(newCost?: null): LogCostOfBoosterUpdatedEventFilter;

    "LogDailyReward(address,uint256)"(
      player?: null,
      newBoosterBalance?: null
    ): LogDailyRewardEventFilter;
    LogDailyReward(
      player?: null,
      newBoosterBalance?: null
    ): LogDailyRewardEventFilter;

    "LogPackOpened(address,uint8)"(
      buyer?: PromiseOrValue<string> | null,
      rarity?: null
    ): LogPackOpenedEventFilter;
    LogPackOpened(
      buyer?: PromiseOrValue<string> | null,
      rarity?: null
    ): LogPackOpenedEventFilter;

    "LogRewardBoosters(address,uint256)"(
      winner?: null,
      boostersAwarded?: null
    ): LogRewardBoostersEventFilter;
    LogRewardBoosters(
      winner?: null,
      boostersAwarded?: null
    ): LogRewardBoostersEventFilter;

    "LogSacrificeNFT(address,uint256,uint16,uint256,uint256)"(
      owner?: null,
      tokenId?: null,
      cardTypeId?: null,
      zoomGained?: null,
      totalSacrificed?: null
    ): LogSacrificeNFTEventFilter;
    LogSacrificeNFT(
      owner?: null,
      tokenId?: null,
      cardTypeId?: null,
      zoomGained?: null,
      totalSacrificed?: null
    ): LogSacrificeNFTEventFilter;

    "LogSponsorLinked(address,address)"(
      sponsor?: null,
      affiliate?: null
    ): LogSponsorLinkedEventFilter;
    LogSponsorLinked(
      sponsor?: null,
      affiliate?: null
    ): LogSponsorLinkedEventFilter;

    "LogSponsorReward(address,address,uint256)"(
      sponsor?: null,
      affiliate?: null,
      zoomReward?: null
    ): LogSponsorRewardEventFilter;
    LogSponsorReward(
      sponsor?: null,
      affiliate?: null,
      zoomReward?: null
    ): LogSponsorRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Probs(uint256,uint256,uint256,uint256)"(
      epic?: null,
      rare?: null,
      uncommon?: null,
      common?: null
    ): ProbsEventFilter;
    Probs(
      epic?: null,
      rare?: null,
      uncommon?: null,
      common?: null
    ): ProbsEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    allBoosterCardIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allCardTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseProbability(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boosterCreditsOwned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnAndBoost(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cardTypeToEdition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cardTypesOwned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProbs(
      wager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokensByRarity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loadNewCardType(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _cardTypeName: PromiseOrValue<string>,
      _set: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _notStoreOrBonus: PromiseOrValue<BigNumberish>,
      _rarity: PromiseOrValue<BigNumberish>,
      _totalAvailable: PromiseOrValue<BigNumberish>,
      _weiCost: PromiseOrValue<BigNumberish>,
      _buyZoom: PromiseOrValue<BigNumberish>,
      _sacrificeZoom: PromiseOrValue<BigNumberish>,
      _unlockZoom: PromiseOrValue<BigNumberish>,
      _cardLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStoreRelease(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _hoursFromNow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sponsors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-tokenByIndex}.
     */
    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensByRarity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBoostersRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    totalCardTypes(overrides?: CallOverrides): Promise<BigNumber>;

    totalSacrificed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weiCostOfBooster(overrides?: CallOverrides): Promise<BigNumber>;

    zoomTokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    zoomValuePerBoosterCredit(overrides?: CallOverrides): Promise<BigNumber>;

    buyCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFreeCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sacrificeNFTs(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBonusBoosters(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    linkMySponsor(
      _mySponsor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyBoosterCredits(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyBoosterAndMintNFT(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintBoosterNFT(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    awardBoosterCredits(
      _winner: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeToDailyBonus(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintDiamond(
      _receiverWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraw balance to wallet
     */
    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthorizedContract(
      _newZoombiesService: PromiseOrValue<string>,
      _isAuthorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCostOfBooster(
      _newWeiCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allBoosterCardIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allCardTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseProbability(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boosterCreditsOwned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnAndBoost(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cardTypeToEdition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cardTypesOwned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProbs(
      wager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokensByRarity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loadNewCardType(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _cardTypeName: PromiseOrValue<string>,
      _set: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _notStoreOrBonus: PromiseOrValue<BigNumberish>,
      _rarity: PromiseOrValue<BigNumberish>,
      _totalAvailable: PromiseOrValue<BigNumberish>,
      _weiCost: PromiseOrValue<BigNumberish>,
      _buyZoom: PromiseOrValue<BigNumberish>,
      _sacrificeZoom: PromiseOrValue<BigNumberish>,
      _unlockZoom: PromiseOrValue<BigNumberish>,
      _cardLevel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStoreRelease(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      _hoursFromNow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sponsors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Enumerable-tokenByIndex}.
     */
    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensByRarity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBoostersRewarded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCardTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSacrificed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weiCostOfBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zoomTokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zoomValuePerBoosterCredit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFreeCard(
      _cardTypeId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sacrificeNFTs(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBonusBoosters(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    linkMySponsor(
      _mySponsor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyBoosterCredits(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyBoosterAndMintNFT(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintBoosterNFT(
      zoomWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    awardBoosterCredits(
      _winner: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeToDailyBonus(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintDiamond(
      _receiverWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw balance to wallet
     */
    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthorizedContract(
      _newZoombiesService: PromiseOrValue<string>,
      _isAuthorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCostOfBooster(
      _newWeiCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
